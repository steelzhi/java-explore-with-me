{
  "info": {
    "_postman_id": "78119279-d8d8-4c9f-ae00-4c0501eba22d",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26121545"
  },
  "item": [
    {
      "name": "user 133",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function() {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('email');\r",
              "    pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\" : \"user1@email.com\",\r\n    \"name\" : \"user1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "user 134",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function() {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('email');\r",
              "    pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\" : \"user2@email.com\",\r\n    \"name\" : \"user2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "category 118",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\" : \"Пляжная жизнь\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/categories",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
              "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
              "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
              "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
              "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
              "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
              "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\" : \"Для всех, кто любит Волгу\",\r\n    \"category\" : 1,\r\n    \"description\" : \"Собираем всех, кто вернулся из отпусков! Рейв, коктейли и много пены - скучно не будет!\",\r\n    \"eventDate\" : \"2023-09-15 10:00:00\",\r\n    \"location\" : \r\n    {\r\n        \"lat\": 62.3429,\r\n        \"lon\": 104.8725\r\n    },\r\n    \"paid\" : false,\r\n    \"participantLimit\" : 2000,\r\n    \"requestModeration\" : false,\r\n    \"title\" : \"ЗаVolgation\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "133"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "too long comment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
              "    pm.response.to.have.status(409);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\" : \"Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! Этот комментарий к событию очень-очень-очень длинный! \"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "134"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment from user 133 to not existing event",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "133"
            },
            {
              "key": "eventId",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment from not existing  user to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1000"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment from initiator (user 133) to his event (event 103)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.response.to.have.status(400);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "133"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment from user 134 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "134"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "too short comment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
              "    pm.response.to.have.status(409);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\" : \"Очень коротко\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "134"
            },
            {
              "key": "commentId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "not existing сomment from user 134",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "134"
            },
            {
              "key": "commentId",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "user 135",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function() {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('email');\r",
              "    pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\" : \"user3@email.com\",\r\n    \"name\" : \"user3\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment 1 from user without rights to update (user 135)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.response.to.have.status(400);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно! Даже очень!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "135"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment 1 from user 134",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, updated\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('updated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно! Даже очень - аж дождаться не могу!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "134"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment (№ 1) from user 135 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Думаю вообще огонь будет, скорее бы!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "135"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment (№ 2) from user 135 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Приду сам и друзей позову! И вы все тоже зовите!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "135"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "not existing comment 1000 by user 135 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "135"
            },
            {
              "key": "commentId",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment 3 by user without rights to delete (user 133)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.response.to.have.status(400);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно! Даже очень!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "133"
            },
            {
              "key": "commentId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment 3 by user 135",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно! Даже очень!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "135"
            },
            {
              "key": "commentId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "user 136",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function() {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('email');\r",
              "    pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\" : \"user4@email.com\",\r\n    \"name\" : \"user4\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment from user 136 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ну, я даже не знаю... Опять рейв и коктейли? Приелось же уже всем...\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "not existing comment by admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);  \r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users/comments/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment (№ 3) from user 135 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Все-таки приду сам и позову друзей! И вы все тоже зовите!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "135"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "all comments for event 103 by user 135",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Количество комментариев должно быть равно 2\", function () {\r",
              "    pm.expect(target.length).to.eql(2);\r",
              "});\r",
              "\r",
              "const target0 = pm.response.json()[0];\r",
              "const target1 = pm.response.json()[1];\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target0).to.have.property('commentId');\r",
              "pm.expect(target0).to.have.property('eventId');\r",
              "pm.expect(target0).to.have.property('userId');\r",
              "pm.expect(target0).to.have.property('text');\r",
              "pm.expect(target0).to.have.property('created');\r",
              "pm.expect(target1).to.have.property('commentId');\r",
              "pm.expect(target1).to.have.property('eventId');\r",
              "pm.expect(target1).to.have.property('userId');\r",
              "pm.expect(target1).to.have.property('text');\r",
              "pm.expect(target1).to.have.property('created');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:eventId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":eventId",
            ":userId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "103"
            },
            {
              "key": "userId",
              "value": "135"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment (№ 2) from user 134 to event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target).to.have.property('commentId');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Наверняка будет ажиотаж. Всем рекомендуется прибыть пораньше!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:userId/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":userId",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "134"
            },
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "all comments for event 103",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Количество комментариев должно быть равно 4\", function () {\r",
              "    pm.expect(target.length).to.eql(5);\r",
              "});\r",
              "\r",
              "const target0 = pm.response.json()[0];\r",
              "const target1 = pm.response.json()[1];\r",
              "const target2 = pm.response.json()[2];\r",
              "const target3 = pm.response.json()[3];\r",
              "const target4 = pm.response.json()[4];\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: commentId, eventId, userId, text, created\", function () {\r",
              "pm.expect(target0).to.have.property('commentId');\r",
              "pm.expect(target0).to.have.property('eventId');\r",
              "pm.expect(target0).to.have.property('userId');\r",
              "pm.expect(target0).to.have.property('text');\r",
              "pm.expect(target0).to.have.property('created');\r",
              "pm.expect(target1).to.have.property('commentId');\r",
              "pm.expect(target1).to.have.property('eventId');\r",
              "pm.expect(target1).to.have.property('userId');\r",
              "pm.expect(target1).to.have.property('text');\r",
              "pm.expect(target1).to.have.property('created');\r",
              "pm.expect(target2).to.have.property('commentId');\r",
              "pm.expect(target2).to.have.property('eventId');\r",
              "pm.expect(target2).to.have.property('userId');\r",
              "pm.expect(target2).to.have.property('text');\r",
              "pm.expect(target2).to.have.property('created');\r",
              "pm.expect(target3).to.have.property('commentId');\r",
              "pm.expect(target3).to.have.property('eventId');\r",
              "pm.expect(target3).to.have.property('userId');\r",
              "pm.expect(target3).to.have.property('text');\r",
              "pm.expect(target3).to.have.property('created');\r",
              "pm.expect(target4).to.have.property('commentId');\r",
              "pm.expect(target4).to.have.property('eventId');\r",
              "pm.expect(target4).to.have.property('userId');\r",
              "pm.expect(target4).to.have.property('text');\r",
              "pm.expect(target4).to.have.property('created');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/comments/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "103"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "comment 4 by admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Ждем-с. Должно быть интересно! Даже очень!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users/comments/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "4"
            }
          ]
        }
      },
      "response": []
    }
  ]
}